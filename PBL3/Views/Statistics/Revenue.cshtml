@model PBL3.Models.ViewModels.RevenueViewModel
@using System.Globalization
@{
    ViewData["Title"] = "Thống kê Doanh thu";
    var years = ViewData["Years"] as List<int> ?? new List<int>();
    var months = ViewData["Months"] as List<dynamic> ?? new List<dynamic>(); // List of { Value, Name }
}

<h1>@ViewData["Title"]</h1>
<hr />
@await Html.PartialAsync("_StatusMessagePartial")

@* Form lọc *@
<form asp-action="Revenue" method="get" class="row g-3 align-items-end mb-4 p-3 border rounded bg-light shadow-sm">
    <div class="col-md-4">
        <label for="year" class="form-label">Chọn Năm:</label>
        <select name="year" id="year" class="form-select" asp-for="SelectedYear">
            @foreach (var y in years)
            {
                <option value="@y">@y</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <label for="month" class="form-label">Chọn Tháng (Để trống để xem cả năm):</label>
        <select name="month" id="month" class="form-select" asp-for="SelectedMonth">
            <option value="">-- Cả năm --</option>
            @foreach (var m in months)
            {
                <option value="@m.Value">@m.Name</option>
            }
        </select>
    </div>
    <div class="col-md-auto">
        <button type="submit" class="btn btn-primary"><i class="fas fa-filter me-1"></i> Lọc</button>
        <a asp-action="Revenue" class="btn btn-outline-secondary"><i class="fas fa-sync-alt me-1"></i> Mặc định</a>
    </div>
</form>

@* Thông tin tổng quan *@
<div class="row mb-4 g-3">
    <div class="col-md-4">
        <div class="card text-center text-white bg-success">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-dollar-sign me-1"></i> Tổng Doanh thu</h5>
                <p class="card-text fs-4 fw-bold">@Model.TotalRevenue.ToString("N0") VNĐ</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-center text-white bg-info">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-ticket-alt me-1"></i> Tổng Số Vé Bán</h5>
                <p class="card-text fs-4 fw-bold">@Model.TotalTicketsSold</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-center text-white bg-secondary">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-calculator me-1"></i> Giá Vé Trung Bình</h5>
                <p class="card-text fs-4 fw-bold">@Model.AverageTicketPrice.ToString("N0") VNĐ</p>
            </div>
        </div>
    </div>
</div>

@* Biểu đồ (Placeholder - cần thư viện JS như Chart.js) *@
<div class="card mb-4 shadow-sm">
    <div class="card-header">
        <i class="fas fa-chart-bar me-1"></i>
        Biểu đồ Doanh thu @(Model.SelectedMonth.HasValue ? $"Tháng {Model.SelectedMonth.Value}" : "") Năm @Model.SelectedYear
    </div>
    <div class="card-body">
        <canvas id="revenueChart"></canvas> @* Placeholder cho Chart.js *@
        @if (Model.SelectedMonth.HasValue && !Model.DailyRevenues.Any())
        {
            <p class="text-muted text-center mt-3">Không có dữ liệu doanh thu cho tháng này.</p>
        }
        else if (!Model.SelectedMonth.HasValue && !Model.MonthlyRevenues.Any())
        {
            <p class="text-muted text-center mt-3">Không có dữ liệu doanh thu cho năm này.</p>
        }
    </div>
</div>

@* Bảng doanh thu theo hãng *@
<div class="card mb-4 shadow-sm">
    <div class="card-header"><i class="fas fa-plane me-1"></i> Doanh thu theo Hãng bay (@Model.SelectedYear @(Model.SelectedMonth.HasValue ? $"/ {Model.SelectedMonth.Value}" : ""))</div>
    <div class="card-body p-0">
        @* p-0 để table chiếm hết card-body *@
        <div class="table-responsive">
            <table class="table table-striped table-hover mb-0">
                @* mb-0 để không có margin dưới cùng *@
                <thead class="table-light">
                    <tr>
                        <th>Hãng bay</th>
                        <th class="text-end">Số vé bán</th>
                        <th class="text-end">Doanh thu</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var airlineData in Model.RevenueByAirlines)
                    {
                        <tr>
                            <td>@airlineData.Airline</td>
                            <td class="text-end">@airlineData.TicketCount</td>
                            <td class="text-end">@airlineData.Revenue.ToString("N0") VNĐ</td>
                        </tr>
                    }
                    @if (!Model.RevenueByAirlines.Any())
                    {
                        <tr><td colspan="3" class="text-center text-muted">Không có dữ liệu.</td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* Bảng chi tiết theo tháng hoặc ngày (tùy chọn) *@
@* ... (Thêm bảng nếu cần) ... *@


@section Scripts {
    @* Thêm thư viện Chart.js *@
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('revenueChart');
            if (ctx) {
                let chartLabels = [];
                let chartData = [];
                let chartLabel = '';
                let rawChartData = null; // Biến tạm để giữ dữ liệu JSON được parse

                // *** BƯỚC 1 & 2: Serialize C# data thành JSON và nhúng vào JS ***
        @if (Model.SelectedMonth.HasValue)
        {
            // Serialize dữ liệu theo ngày
            @:rawChartData = JSON.parse('@Html.Raw(Json.Serialize(Model.DailyRevenues))');
            @:chartLabel = 'Doanh thu theo Ngày';
        }
        else
        {
            // Serialize dữ liệu theo tháng
            @:rawChartData = JSON.parse('@Html.Raw(Json.Serialize(Model.MonthlyRevenues))');
            @:chartLabel = 'Doanh thu theo Tháng';
        }

                // *** BƯỚC 3 & 4: Dùng JS để xử lý dữ liệu đã parse ***
                if (rawChartData && rawChartData.length > 0) {
                    // Kiểm tra lại bằng JS xem có phải đang xem theo tháng không
                    const isMonthlyView = !@Model.SelectedMonth.HasValue.ToString().ToLower();

                    if (!isMonthlyView) { // Dữ liệu theo ngày
                        rawChartData.forEach(daily => {
                             // Lưu ý: Tên thuộc tính có thể là camelCase sau khi serialize (day, revenue)
                            chartLabels.push(`Ngày ${daily.day}`);
                            chartData.push(daily.revenue);
                        });
                    } else { // Dữ liệu theo tháng
                        rawChartData.forEach(monthly => {
                            // Lưu ý: Tên thuộc tính có thể là camelCase (month, monthName, revenue)
                            chartLabels.push(monthly.monthName);
                            chartData.push(monthly.revenue);
                        });
                    }

                    // Tạo biểu đồ (giữ nguyên logic Chart.js)
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: chartLabels, // Dùng mảng JS đã xử lý
                            datasets: [{
                                label: chartLabel, // Dùng biến JS đã xử lý
                                data: chartData,   // Dùng mảng JS đã xử lý
                                backgroundColor: 'rgba(0, 123, 255, 0.5)',
                                borderColor: 'rgba(0, 123, 255, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: { /* ... các options giữ nguyên ... */ }
                    });

                } else {
                     // Xử lý khi không có dữ liệu (giữ nguyên logic ẩn canvas, hiện text)
                     ctx.style.display = 'none';
                     const noDataMsg = document.createElement('p');
                     noDataMsg.className = 'text-muted text-center mt-3';
                     noDataMsg.textContent = 'Không có dữ liệu để vẽ biểu đồ cho khoảng thời gian này.';
                     ctx.parentNode.appendChild(noDataMsg);
                }
            }
        });
    </script>
}